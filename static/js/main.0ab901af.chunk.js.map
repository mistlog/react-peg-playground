{"version":3,"sources":["component/Header.tsx","component/compiler.ts","component/Editor.tsx","component/ExampleNav.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","react_default","a","createElement","className","classNames","container","mergeStyleSets","backgroundColor","border","padding","boxShadow","color","font","execute","code","deps","arguments","length","undefined","load","Function","_module","exports","default","window","path","Object","objectSpread","BuiltInModules","createRequire","evalScript","raw","concat","result","babel","plugins","jsxPlugin","commonjsPlugin","compile","error","message","stack","react-peg","ReactPeg","Editor","props","defaultCode","editorRef","useRef","_useState","useState","_useState2","slicedToArray","output","setOutput","run","current","getValue","JSON","stringify","location","options","minimap","enabled","scrollbar","useShadows","es","height","width","language","editorDidMount","_","editor","onDidChangeModelContent","debounce","event","value","style","readOnly","monaco","init","then","languages","typescript","typescriptDefaults","setDiagnosticsOptions","noSemanticValidation","noSyntaxValidation","catch","console","display","examples","Map","name","CalculatorExample","JSONExample","ExampleNav","onSelectExample","groups","links","forEach","group_name","link","url","isExpanded","map","example","key","push","CreateGroupsFromExamples","get","selected","setSelected","Nav","selectedKey","styles","root","marginTop","onLinkClick","item","find","App","exampleCode","setExampleCode","header","main","nav","_ref","flexDirection","overflow","Boolean","hostname","match","initializeIcons","mergeStyles","selectors",":global(body), :global(html), :global(#root)","margin","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0ab901af.chunk.js","sourcesContent":["import React from 'react';\r\nimport { mergeStyleSets } from '@fluentui/merge-styles';\r\n\r\nexport function Header() {\r\n    return (\r\n        <div className={classNames.container}>\r\n            ReactPeg Playground\r\n        </div>\r\n    )\r\n}\r\n\r\nconst classNames = mergeStyleSets({\r\n    container: {\r\n        backgroundColor: \"#3178c6\",\r\n        border: \"0px\",\r\n        padding: \"10px\",\r\n        boxShadow: \"3px 3px 5px rgba(0, 0, 0, 0.25)\",\r\n        color: \"white\",\r\n        font: `normal 24px -apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell,\r\n        \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", Arial, sans-serif`\r\n    }\r\n})","import * as babel from \"@babel/core\";\r\nimport jsxPlugin from \"@babel/plugin-transform-react-jsx\";\r\nimport commonjsPlugin from \"@babel/plugin-transform-modules-commonjs\";\r\nimport { ReactPeg } from \"react-peg\";\r\n\r\nexport function execute(code: string) {\r\n    try {\r\n        const result = compile(code);\r\n        const { exports } = evalScript(result, {});\r\n        return exports;\r\n    } catch (error) {\r\n        return { message: error.message, stack: error.stack };\r\n    }\r\n}\r\n\r\nfunction compile(raw: string) {\r\n    const code = `/** @jsx ReactPeg.createChunk */\\n ${raw}`;\r\n    const result = babel.transformSync(code, { plugins: [jsxPlugin, commonjsPlugin] });\r\n    if (result) {\r\n        return result.code || \"\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\nfunction evalScript(code: string, deps = {}) {\r\n    const load = new Function(\"window\", \"require\", \"exports\", code);\r\n    const _module = {\r\n        exports: { default: null }\r\n    };\r\n\r\n    load(window, createRequire(deps), _module.exports);\r\n    return _module;\r\n}\r\n\r\nconst BuiltInModules = {\r\n    \"react-peg\": { ReactPeg }\r\n};\r\n\r\nfunction createRequire(deps = {}) {\r\n    return (path: string) => {\r\n        return { ...BuiltInModules, ...deps }[path];\r\n    };\r\n}\r\n\r\n","import React, { useRef, useState } from 'react';\r\nimport { mergeStyleSets } from '@fluentui/merge-styles';\r\nimport MonacoEditor from '@monaco-editor/react';\r\nimport { monaco } from '@monaco-editor/react';\r\nimport * as debounce from \"lodash.debounce\";\r\nimport { execute } from './compiler';\r\n\r\nmonaco.init()\r\n    .then(monaco => {\r\n\r\n        monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({\r\n            noSemanticValidation: true,\r\n            noSyntaxValidation: true\r\n        });\r\n\r\n    })\r\n    .catch(error => console.error('An error occurred during initialization of Monaco: ', error));\r\n\r\nexport interface IEditorProps {\r\n    defaultCode?: string\r\n}\r\nexport function Editor(props: IEditorProps) {\r\n    const { defaultCode } = props;\r\n    const editorRef = useRef<any>();\r\n    const [output, setOutput] = useState(\"\");\r\n\r\n    function run() {\r\n        const code = editorRef.current.getValue();\r\n        const result = execute(code);\r\n        if (result[\"message\"]) {\r\n            setOutput(result[\"message\"]);\r\n        }\r\n        else if (result[\"default\"] && result[\"default\"].message) {\r\n            setOutput(result[\"default\"].message + \"\\n\\nlocation:\\n\" + JSON.stringify(result[\"default\"].location, null ,4));\r\n        } else {\r\n            setOutput(JSON.stringify(result, null, 4));\r\n        }\r\n    }\r\n\r\n    function handleEditorDidMount(_, editor) {\r\n        editorRef.current = editor;\r\n        run();\r\n        editorRef.current.onDidChangeModelContent(debounce((event: any) => {\r\n            run();\r\n        }, 1000));\r\n    }\r\n\r\n    const options = {\r\n        minimap: { enabled: false },\r\n        scrollbar: { useShadows: false }\r\n    };\r\n\r\n    return (\r\n        <div className={classNames.container} >\r\n            <MonacoEditor height=\"100%\" width=\"50%\" language=\"typescript\" options={options} editorDidMount={handleEditorDidMount} value={defaultCode} />\r\n            <div style={{ width: \"50%\" }}>\r\n                <MonacoEditor height=\"100%\" width=\"100%\" language=\"typescript\" options={{ ...options, readOnly: true }} value={output} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n/**\r\n * \r\n */\r\nconst classNames = mergeStyleSets({\r\n    container: {\r\n        height: \"100%\",\r\n        display: \"flex\"\r\n    }\r\n})","import React, { useState } from 'react';\r\nimport { Nav, INavLinkGroup, INavLink } from '@fluentui/react';\r\nimport CalculatorExample from \"./examples/calculator.json\";\r\nimport JSONExample from \"./examples/json.json\";\r\n\r\nexport type Examples = Map<string, Array<IExample>>;\r\n\r\nexport interface IExample {\r\n    code: string;\r\n    name: string;\r\n}\r\n\r\nexport interface IExampleNav {\r\n    onSelectExample: (example: IExample) => void;\r\n}\r\n\r\nconst examples = new Map<string, Array<IExample>>([\r\n    [\"Examples\", [\r\n        { name: \"calculator\", code: CalculatorExample.code },\r\n        { name: \"json\", code: JSONExample.code },\r\n    ]]\r\n]);\r\n\r\nexport function ExampleNav(props: IExampleNav) {\r\n    const { onSelectExample } = props;\r\n    const groups = CreateGroupsFromExamples(examples);\r\n    const [selected, setSelected] = useState(examples.get(\"Examples\")![0].name);\r\n    return (\r\n        <Nav\r\n            selectedKey={selected}\r\n            groups={groups}\r\n            styles={{ root: { width: 200, marginTop: -20 } }}\r\n            onLinkClick={(_, item) => {\r\n                const name = item!.key;\r\n                if (name) {\r\n                    onSelectExample({ name, code: examples.get(\"Examples\")!.find(example => example.name === name)!.code });\r\n                    setSelected(name);\r\n                }\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\n/**\r\n * \r\n */\r\nfunction CreateGroupsFromExamples(examples: Examples): Array<INavLinkGroup> {\r\n    //\r\n    const links: Array<INavLink> = [];\r\n    examples.forEach((examples, group_name) => {\r\n        const link: INavLink = {\r\n            name: group_name,\r\n            url: \"\",\r\n            isExpanded: true,\r\n            links: examples.map(example => ({ name: example.name, url: \"\", key: example.name }))\r\n        }\r\n\r\n        links.push(link);\r\n    })\r\n\r\n    //\r\n    const groups: Array<INavLinkGroup> = [{ links }];\r\n    return groups;\r\n}\r\n","import React, { useState } from 'react';\nimport { mergeStyleSets } from '@fluentui/merge-styles';\nimport { Header } from './component/Header';\nimport { Editor } from './component/Editor';\nimport { ExampleNav } from './component/ExampleNav';\nimport CalculatorExample from \"./component/examples/calculator.json\";\n\nexport function App() {\n    const [exampleCode, setExampleCode] = useState(CalculatorExample.code);\n\n    return (\n        <div className={classNames.container}>\n            <div className={classNames.header}>\n                <Header />\n            </div>\n            <div className={classNames.main}>\n                <div className={classNames.nav}>\n                    <ExampleNav onSelectExample={({ name, code }) => {\n                        setExampleCode(code)\n                    }} />\n                </div>\n                <div className={classNames.editor}>\n                    <Editor defaultCode={exampleCode} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst classNames = mergeStyleSets({\n    container: {\n        height: \"100vh\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        overflow: \"hidden\"\n    },\n    header: {\n        height: \"60px\"\n    },\n    main: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        marginTop: 16\n    },\n    nav: {\n        height: \"100vh\",\n        marginTop: 16\n    },\n    editor: {\n        height: \"100vh\",\n        width: \"100%\",\n        marginTop: 16\n    }\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { initializeIcons } from '@uifabric/icons';\nimport { mergeStyles } from '@fluentui/merge-styles';\n\ninitializeIcons();\n\n// Inject some global styles\nmergeStyles({\n  selectors: {\n    ':global(body), :global(html), :global(#root)': {\n      margin: 0,\n      padding: 0,\n      height: '100vh',\n      overflow: \"auto\"\n    }\n  }\n});\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}