(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{218:function(n){n.exports={code:'import { ReactPeg } from "react-peg";\r\n\r\nlet result = null;\r\n\r\ntry {\r\n    const parser = ReactPeg.render(<JSONText />);\r\n    const text = JSON.stringify({ a: 1, b: "text", c: null, d: [1, "a", { nested: { a: 1, b: "text", c: null } }] });\r\n    const ast = parser.parse(text);\r\n    result = ast;\r\n} catch (error) {\r\n    result = error;\r\n}\r\n\r\nexport default result;\r\n\r\n/**\r\n * grammar\r\n */\r\nfunction JSONText() {\r\n    return (\r\n        <pattern action={({ value }) => value}>\r\n            <_ />\r\n            <Value label="value" />\r\n            <_ />\r\n        </pattern>\r\n    );\r\n}\r\n\r\nfunction _() {\r\n    return (\r\n        <repeat type="*">\r\n            <set> \\t\\n\\r</set>\r\n        </repeat>\r\n    );\r\n}\r\n\r\nfunction Value() {\r\n    return (\r\n        <or>\r\n            <pattern action={() => false}>\r\n                <text>false</text>\r\n            </pattern>\r\n            <pattern action={() => null}>\r\n                <text>null</text>\r\n            </pattern>\r\n            <pattern action={() => true}>\r\n                <text>true</text>\r\n            </pattern>\r\n            <ObjectValue />\r\n            <Array />\r\n            <Number />\r\n            <String />\r\n        </or>\r\n    );\r\n}\r\n\r\nfunction Number() {\r\n    const digits = (\r\n        <repeat type="+">\r\n            <set>0-9</set>\r\n        </repeat>\r\n    );\r\n\r\n    const action = ({ globalFunction }) => {\r\n        return parseFloat(globalFunction.text());\r\n    };\r\n\r\n    return (\r\n        <pattern action={action}>\r\n            {digits}\r\n            <opt>\r\n                <text>.</text>\r\n                {digits}\r\n            </opt>\r\n        </pattern>\r\n    );\r\n}\r\n\r\n//\r\nfunction String() {\r\n    return (\r\n        <pattern action={({ chars }) => chars.join("")}>\r\n            <QuotationMark />\r\n            <repeat type="*" label="chars">\r\n                <Char />\r\n            </repeat>\r\n            <QuotationMark />\r\n        </pattern>\r\n    );\r\n}\r\n\r\nfunction Char() {\r\n    return <Unescaped />;\r\n}\r\n\r\nfunction QuotationMark() {\r\n    return <text>"</text>;\r\n}\r\n\r\nfunction Unescaped() {\r\n    // https://stackoverflow.com/questions/43516938/hexadecimal-search-by-js-test-function-and-replacing-it-with-some-value\r\n    // matches ASCII characters with hex codes from 00 till 1F (control chars) and also a 22 and 5C chars (" and \\ respectively).\r\n    return <set>^\\0-\\x1F\\x22\\x5C</set>;\r\n}\r\n\r\n//\r\nfunction BeginArray() {\r\n    return (\r\n        <list>\r\n            <_ />\r\n            <text>[</text>\r\n            <_ />\r\n        </list>\r\n    )\r\n}\r\n\r\nfunction EndArray() {\r\n    return (\r\n        <list>\r\n            <_ />\r\n            <text>]</text>\r\n            <_ />\r\n        </list>\r\n    )\r\n}\r\n\r\nfunction ValueSeparator() {\r\n    return (\r\n        <list>\r\n            <_ />\r\n            <text>,</text>\r\n            <_ />\r\n        </list>\r\n    )\r\n}\r\n\r\nfunction Array() {\r\n    return (\r\n        <pattern action={(({ head, tail }) => {\r\n            return [head, ...tail];\r\n        })}>\r\n            <BeginArray />\r\n            <Value label="head" />\r\n            <repeat type="*" label="tail">\r\n                <pattern action={({ value }) => value}>\r\n                    <ValueSeparator />\r\n                    <Value label="value" />\r\n                </pattern>\r\n            </repeat>\r\n            <EndArray />\r\n        </pattern>\r\n    )\r\n}\r\n\r\n//\r\nfunction BeginObject() {\r\n    return (\r\n        <list>\r\n            <_ />\r\n            <text>{`{`}</text>\r\n            <_ />\r\n        </list>\r\n    )\r\n}\r\n\r\nfunction EndObject() {\r\n    return (\r\n        <list>\r\n            <_ />\r\n            <text>{`}`}</text>\r\n            <_ />\r\n        </list>\r\n    )\r\n}\r\n\r\nfunction ObjectValue() {\r\n    return (\r\n        <pattern action={(({ head, tail }) => {\r\n            return [head, ...tail].reduce((prev, curr) => {\r\n                prev[curr.name] = curr.value;\r\n                return prev;\r\n            }, {});\r\n        })}>\r\n            <BeginObject />\r\n            <Member label="head" />\r\n            <repeat type="*" label="tail">\r\n                <pattern action={({ value }) => value}>\r\n                    <ValueSeparator />\r\n                    <Member label="value" />\r\n                </pattern>\r\n            </repeat>\r\n            <EndObject />\r\n        </pattern>\r\n    )\r\n}\r\n\r\nfunction NameSeparator() {\r\n    return (\r\n        <list>\r\n            <_ />\r\n            <text>:</text>\r\n            <_ />\r\n        </list>\r\n    )\r\n}\r\n\r\nfunction Member() {\r\n    return (\r\n        <pattern action={({ name, value }) => ({ name, value })}>\r\n            <String label="name" />\r\n            <NameSeparator />\r\n            <Value label="value" />\r\n        </ pattern>\r\n    )\r\n}\r\n'}},234:function(n,r,e){n.exports=e(546)},511:function(n,r){},546:function(n,r,e){"use strict";e.r(r);var t=e(0),a=e.n(t),o=e(91),i=e.n(o),l=e(19),c=e(568);function u(){return a.a.createElement("div",{className:s.container},"ReactPeg Playground")}var s=Object(c.a)({container:{backgroundColor:"#3178c6",border:"0px",padding:"10px",boxShadow:"3px 3px 5px rgba(0, 0, 0, 0.25)",color:"white",font:'normal 24px -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell,\n        "Fira Sans", "Droid Sans", "Helvetica Neue", Arial, sans-serif'}}),p=e(25),d=e(67),m=e(214),f=e(53),x=e(215),g=e.n(x),h=e(216),v=e.n(h);function b(n){try{return function(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=new Function("window","require","exports",n),t={exports:{default:null}};return e(window,function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(r){return Object(p.a)({},y,n)[r]}}(r),t.exports),t}(function(n){var r="/** @jsx ReactPeg.createChunk */\n ".concat(n),e=f.transformSync(r,{plugins:[g.a,v.a]});if(e)return e.code||"";return""}(n),{}).exports}catch(r){return{message:r.message,stack:r.stack}}}var y={"react-peg":{ReactPeg:e(217).ReactPeg}};function w(n){var r=n.defaultCode,e=Object(t.useRef)(),o=Object(t.useState)(""),i=Object(l.a)(o,2),c=i[0],u=i[1];function s(){var n=b(e.current.getValue());n.message?u(n.message):n.default&&n.default.message?u(n.default.message+"\n\nlocation:\n"+JSON.stringify(n.default.location,null,4)):u(JSON.stringify(n,null,4))}var f={minimap:{enabled:!1},scrollbar:{useShadows:!1}};return a.a.createElement("div",{className:E.container},a.a.createElement(d.a,{height:"100%",width:"50%",language:"typescript",options:f,editorDidMount:function(n,r){e.current=r,s(),e.current.onDidChangeModelContent(m(function(n){s()},1e3))},value:r}),a.a.createElement("div",{style:{width:"50%"}},a.a.createElement(d.a,{height:"100%",width:"100%",language:"typescript",options:Object(p.a)({},f,{readOnly:!0}),value:c})))}d.b.init().then(function(n){n.languages.typescript.typescriptDefaults.setDiagnosticsOptions({noSemanticValidation:!0,noSyntaxValidation:!0})}).catch(function(n){return console.error("An error occurred during initialization of Monaco: ",n)});var E=Object(c.a)({container:{height:"100%",display:"flex"}}),O=e(567),S=e(94),j=e(218),_=new Map([["Examples",[{name:"calculator",code:S.code},{name:"json",code:j.code}]]]);function k(n){var r=n.onSelectExample,e=function(n){var r=[];return n.forEach(function(n,e){var t={name:e,url:"",isExpanded:!0,links:n.map(function(n){return{name:n.name,url:"",key:n.name}})};r.push(t)}),[{links:r}]}(_),o=Object(t.useState)(_.get("Examples")[0].name),i=Object(l.a)(o,2),c=i[0],u=i[1];return a.a.createElement(O.a,{selectedKey:c,groups:e,styles:{root:{width:200,marginTop:-20}},onLinkClick:function(n,e){var t=e.key;t&&(r({name:t,code:_.get("Examples").find(function(n){return n.name===t}).code}),u(t))}})}function N(){var n=Object(t.useState)(S.code),r=Object(l.a)(n,2),e=r[0],o=r[1];return a.a.createElement("div",{className:F.container},a.a.createElement("div",{className:F.header},a.a.createElement(u,null)),a.a.createElement("div",{className:F.main},a.a.createElement("div",{className:F.nav},a.a.createElement(k,{onSelectExample:function(n){n.name;var r=n.code;o(r)}})),a.a.createElement("div",{className:F.editor},a.a.createElement(w,{defaultCode:e}))))}var F=Object(c.a)({container:{height:"100vh",display:"flex",flexDirection:"column",overflow:"hidden"},header:{height:"60px"},main:{display:"flex",flexDirection:"row",marginTop:16},nav:{height:"100vh",marginTop:16},editor:{height:"100vh",width:"100%",marginTop:16}});Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));var C=e(221),V=e(566);Object(C.a)(),Object(V.a)({selectors:{":global(body), :global(html), :global(#root)":{margin:0,padding:0,height:"100vh",overflow:"auto"}}}),i.a.render(a.a.createElement(N,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then(function(n){n.unregister()})},94:function(n){n.exports={code:'import { ReactPeg } from "react-peg";\r\n\r\nlet result = null;\r\n\r\ntry {\r\n    const parser = ReactPeg.render(<Expression />);\r\n    const ast = parser.parse("1.5 + 2 + 3.4 * ( 25 - 4 ) / 2 - 8");\r\n    result = ast;\r\n} catch (error) {\r\n    result = error;\r\n}\r\n\r\nexport default result;\r\n\r\n/**\r\n * grammar\r\n */\r\nfunction Expression() {\r\n\r\n    const head = (\r\n        <Term label="head" />\r\n    );\r\n\r\n    const tail = (\r\n        <repeat label="tail" type="*">\r\n            <pattern action={({ term, op }) => ({ op, term })}>\r\n                <_ />\r\n                <or label="op">\r\n                    <text>+</text>\r\n                    <text>-</text>\r\n                </or>\r\n                <Term label="term" />\r\n                <_ />\r\n            </pattern>\r\n        </repeat>\r\n    );\r\n\r\n    const action = ({ head, tail }) => {\r\n        let value = head;\r\n        tail.forEach(({ op, term }) => {\r\n            if (op === "+") {\r\n                value += term;\r\n            } else if (op === "-") {\r\n                value -= term;\r\n            }\r\n        })\r\n        return value;\r\n    }\r\n\r\n    return (\r\n        <pattern action={action}>\r\n            {head}\r\n            {tail}\r\n        </pattern>\r\n    );\r\n}\r\n\r\nfunction _() {\r\n    return (\r\n        <repeat type="*">\r\n            <set> \\t\\n\\r</set>\r\n        </repeat>\r\n    );\r\n}\r\n\r\nfunction Number() {\r\n    const digits = (\r\n        <repeat type="+">\r\n            <set>0-9</set>\r\n        </repeat>\r\n    );\r\n\r\n    const action = ({ globalFunction }) => {\r\n        return parseFloat(globalFunction.text());\r\n    }\r\n\r\n    return (\r\n        <pattern action={action}>\r\n            {digits}\r\n            <opt>\r\n                <text>.</text>\r\n                {digits}\r\n            </opt>\r\n        </pattern>\r\n    );\r\n}\r\n\r\nfunction Factor() {\r\n\r\n    const number = (\r\n        <pattern action={({ value }) => value}>\r\n            <_ />\r\n            <Number label="value" />\r\n            <_ />\r\n        </pattern>\r\n    );\r\n\r\n    const expression = (\r\n        <pattern action={({ expression }) => expression}>\r\n            <_ />\r\n            <text>(</text>\r\n            <Expression label="expression" />\r\n            <text>)</text>\r\n            <_ />\r\n        </pattern >\r\n    );\r\n\r\n    return (\r\n        <or>\r\n            {expression}\r\n            {number}\r\n        </or>\r\n    );\r\n}\r\n\r\nfunction Term() {\r\n\r\n    const head = (\r\n        <Factor label="head" />\r\n    );\r\n\r\n    const tail = (\r\n        <repeat label="tail" type="*">\r\n            <pattern action={({ op, factor }) => ({ op, factor })}>\r\n                <_ />\r\n                <or label="op">\r\n                    <text>*</text>\r\n                    <text>/</text>\r\n                </or>\r\n                <Factor label="factor" />\r\n                <_ />\r\n            </pattern>\r\n        </repeat>\r\n    );\r\n\r\n    const action = ({ head, tail }) => {\r\n        let value = head;\r\n        tail.forEach(({ op, factor }) => {\r\n            if (op === "*") {\r\n                value *= factor;\r\n            } else if (op === "/") {\r\n                value /= factor;\r\n            }\r\n        })\r\n        return value;\r\n    }\r\n\r\n    return (\r\n        <pattern action={action}>\r\n            {head}\r\n            {tail}\r\n        </pattern>\r\n    );\r\n}\r\n'}}},[[234,1,2]]]);
//# sourceMappingURL=main.0ab901af.chunk.js.map