{"code":"import { ReactPeg } from \"react-peg\";\r\n\r\nlet result = null;\r\n\r\ntry {\r\n    const parser = ReactPeg.render(<JSONText />);\r\n    const text = JSON.stringify({ a: 1, b: \"text\", c: null, d: [1, \"a\", { nested: { a: 1, b: \"text\", c: null } }] });\r\n    const ast = parser.parse(text);\r\n    result = ast;\r\n} catch (error) {\r\n    result = error;\r\n}\r\n\r\nexport default result;\r\n\r\n/**\r\n * grammar\r\n */\r\nfunction JSONText() {\r\n    return (\r\n        <pattern action={({ value }) => value}>\r\n            <_ />\r\n            <Value label=\"value\" />\r\n            <_ />\r\n        </pattern>\r\n    );\r\n}\r\n\r\nfunction _() {\r\n    return (\r\n        <repeat type=\"*\">\r\n            <set> \\t\\n\\r</set>\r\n        </repeat>\r\n    );\r\n}\r\n\r\nfunction Value() {\r\n    return (\r\n        <or>\r\n            <pattern action={() => false}>\r\n                <text>false</text>\r\n            </pattern>\r\n            <pattern action={() => null}>\r\n                <text>null</text>\r\n            </pattern>\r\n            <pattern action={() => true}>\r\n                <text>true</text>\r\n            </pattern>\r\n            <ObjectValue />\r\n            <Array />\r\n            <Number />\r\n            <String />\r\n        </or>\r\n    );\r\n}\r\n\r\nfunction Number() {\r\n    const digits = (\r\n        <repeat type=\"+\">\r\n            <set>0-9</set>\r\n        </repeat>\r\n    );\r\n\r\n    const action = ({ globalFunction }) => {\r\n        return parseFloat(globalFunction.text());\r\n    };\r\n\r\n    return (\r\n        <pattern action={action}>\r\n            {digits}\r\n            <opt>\r\n                <text>.</text>\r\n                {digits}\r\n            </opt>\r\n        </pattern>\r\n    );\r\n}\r\n\r\n//\r\nfunction String() {\r\n    return (\r\n        <pattern action={({ chars }) => chars.join(\"\")}>\r\n            <QuotationMark />\r\n            <repeat type=\"*\" label=\"chars\">\r\n                <Char />\r\n            </repeat>\r\n            <QuotationMark />\r\n        </pattern>\r\n    );\r\n}\r\n\r\nfunction Char() {\r\n    return <Unescaped />;\r\n}\r\n\r\nfunction QuotationMark() {\r\n    return <text>\"</text>;\r\n}\r\n\r\nfunction Unescaped() {\r\n    // https://stackoverflow.com/questions/43516938/hexadecimal-search-by-js-test-function-and-replacing-it-with-some-value\r\n    // matches ASCII characters with hex codes from 00 till 1F (control chars) and also a 22 and 5C chars (\" and \\ respectively).\r\n    return <set>^\\0-\\x1F\\x22\\x5C</set>;\r\n}\r\n\r\n//\r\nfunction BeginArray() {\r\n    return (\r\n        <list>\r\n            <_ />\r\n            <text>[</text>\r\n            <_ />\r\n        </list>\r\n    )\r\n}\r\n\r\nfunction EndArray() {\r\n    return (\r\n        <list>\r\n            <_ />\r\n            <text>]</text>\r\n            <_ />\r\n        </list>\r\n    )\r\n}\r\n\r\nfunction ValueSeparator() {\r\n    return (\r\n        <list>\r\n            <_ />\r\n            <text>,</text>\r\n            <_ />\r\n        </list>\r\n    )\r\n}\r\n\r\nfunction Array() {\r\n    return (\r\n        <pattern action={(({ head, tail }) => {\r\n            return [head, ...tail];\r\n        })}>\r\n            <BeginArray />\r\n            <Value label=\"head\" />\r\n            <repeat type=\"*\" label=\"tail\">\r\n                <pattern action={({ value }) => value}>\r\n                    <ValueSeparator />\r\n                    <Value label=\"value\" />\r\n                </pattern>\r\n            </repeat>\r\n            <EndArray />\r\n        </pattern>\r\n    )\r\n}\r\n\r\n//\r\nfunction BeginObject() {\r\n    return (\r\n        <list>\r\n            <_ />\r\n            <text>{`{`}</text>\r\n            <_ />\r\n        </list>\r\n    )\r\n}\r\n\r\nfunction EndObject() {\r\n    return (\r\n        <list>\r\n            <_ />\r\n            <text>{`}`}</text>\r\n            <_ />\r\n        </list>\r\n    )\r\n}\r\n\r\nfunction ObjectValue() {\r\n    return (\r\n        <pattern action={(({ head, tail }) => {\r\n            return [head, ...tail].reduce((prev, curr) => {\r\n                prev[curr.name] = curr.value;\r\n                return prev;\r\n            }, {});\r\n        })}>\r\n            <BeginObject />\r\n            <Member label=\"head\" />\r\n            <repeat type=\"*\" label=\"tail\">\r\n                <pattern action={({ value }) => value}>\r\n                    <ValueSeparator />\r\n                    <Member label=\"value\" />\r\n                </pattern>\r\n            </repeat>\r\n            <EndObject />\r\n        </pattern>\r\n    )\r\n}\r\n\r\nfunction NameSeparator() {\r\n    return (\r\n        <list>\r\n            <_ />\r\n            <text>:</text>\r\n            <_ />\r\n        </list>\r\n    )\r\n}\r\n\r\nfunction Member() {\r\n    return (\r\n        <pattern action={({ name, value }) => ({ name, value })}>\r\n            <String label=\"name\" />\r\n            <NameSeparator />\r\n            <Value label=\"value\" />\r\n        </ pattern>\r\n    )\r\n}\r\n"}